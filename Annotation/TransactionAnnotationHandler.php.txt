<?php

namespace Annotation;

use Doctrine\Common\Annotations\Annotation\Attribute;
use Doctrine\Common\Annotations\Annotation\Attributes;
use Doctrine\Common\Annotations\AnnotationException;
use Exception;
use ReflectionClass;
use ReflectionException;
use Doctrine\Common\Annotations\Reader;
use Transaction;

class TransactionAnnotationHandler
{
    /**
     * Annotations reader.
     * @var Reader
     */
    private $reader;
	
    public function __construct(Reader $reader)
    {
        $this->reader = $reader;
    }
	
	public function getAnnotation(ReflectionMethod $method)
	{
        //$reflectionMethod = new ReflectionMethod('Transaction', 'getProperty');
        //$methodAnnotations = $annotationReader->getMethodAnnotations($reflectionMethod);
		
        $annotation = $this->reader->getMethodAnnotation($method, Transaction::class);
        //if ($annotation === null) {
        //    // If there is no method-level annotation, gets class-level annotation.
        //    $annotation = $this->reader->getClassAnnotation($method->getDeclaringClass(), Transactional::class);
        //}
		
        return $annotation;
	}
}
